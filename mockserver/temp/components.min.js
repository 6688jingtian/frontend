/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(3);


/***/ },
/* 1 */,
/* 2 */,
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _tree = __webpack_require__(4);

	var _tree2 = _interopRequireDefault(_tree);

	var _node = __webpack_require__(9);

	var _node2 = _interopRequireDefault(_node);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = angular.module('directives.tree', [_node2.default]).directive('treeview', function () {
		return new _tree2.default();
	}).name;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	file  Tree view UI Component
	author zhangyou04@baidu.com
	
	// import angular from 'angular';


	__webpack_require__(5);

	__webpack_require__(9);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var TreeViewDirective = function () {
	    function TreeViewDirective() {
	        _classCallCheck(this, TreeViewDirective);

	        this.template = __webpack_require__(11);
	        this.restrict = 'E';
	        this.replace = 'true';
	        this.scope = {
	            nodes: '=data',
	            getIconClass: '=',
	            getNodeText: '=',
	            onToggleExpand: '=',
	            onEdit: '=',
	            onDelete: '=',
	            onSelect: '=',
	            onDragStart: '=',
	            onDrop: '=',
	            onBeforeDrop: '='
	        };
	    }

	    _createClass(TreeViewDirective, [{
	        key: 'link',
	        value: function link(scope, element, attrs) {
	            var $ = angular.element;
	            // 相关属性参数初始化
	            scope.animation = !!attrs.animation;
	            scope.multiple = !!attrs.multiple;
	            scope.editable = !!attrs.editable;
	            scope.id = attrs.key || 'id';
	            scope.name = attrs.name || 'name';
	            scope.tooltip = attrs.tooltip || attrs.name || 'name';
	            scope.children = attrs.children || 'children';
	            scope.isChecked = function (node, type) {
	                var children = node[scope.children] || [];
	                var hasChecked = false;
	                var hasNoChecked = false;

	                for (var i = 0, len = children.length; i < len; i++) {
	                    hasNoChecked = hasNoChecked || !children[i].isSelected;
	                    hasChecked = hasChecked || !!children[i].isSelected;
	                }

	                return type === 'part' ? hasNoChecked && hasChecked : hasChecked && !hasNoChecked;
	            };
	            scope.makeIconClass = function (node) {
	                var iconClass = [];
	                if (typeof scope.getIconClass === 'function') {
	                    iconClass.push(scope.getIconClass(node));
	                }
	                if (typeof attrs.icon === 'string') {
	                    iconClass.push(attrs.icon);
	                }
	                return iconClass.join(' ');
	            };
	            scope.makeToggleIconClass = function (node) {
	                var iconClass = 'node-switch';
	                if (typeof scope.getToggleIconClass === 'function') {
	                    iconClass = scope.getToggleIconClass(node);
	                }

	                if (typeof attrs.toggleIcon === 'string') {
	                    iconClass = attrs.toggleIcon;
	                }

	                return iconClass;
	            };

	            var id = scope.id;
	            var children = scope.children;
	            var findNode = function findNode(node, nodes, callback) {
	                var result = null;

	                for (var i = 0, len = nodes.length; i < len; i++) {
	                    if (nodes[i].id + '' === node.id + '') {
	                        result = nodes[i];
	                        callback && callback(i, nodes, parent);
	                    } else {
	                        result = findNode(node, nodes[i].children || [], callback);
	                    }

	                    if (result) {
	                        return result;
	                    }
	                }

	                return result;
	            };
	            var goThroughNodes = function goThroughNodes(nodes, callback) {
	                if (typeof callback !== 'function') {
	                    return;
	                }

	                (nodes || []).forEach(function (node, i) {
	                    if (callback(node)) {
	                        return;
	                    } else {
	                        goThroughNodes(node.children, callback);
	                    }
	                });
	            };

	            // events
	            angular.extend(scope, {
	                toggle: function toggle(node, evt) {
	                    node.isCollapsed = !node.isCollapsed;
	                    angular.isFunction(scope.onToggleExpand) && scope.onToggleExpand(node, evt);
	                },
	                edit: function edit(node, nodes, evt) {
	                    goThroughNodes(nodes, function (node) {
	                        node.isEdit = false;
	                    });
	                    node.isEdit = true;
	                    angular.isFunction(scope.onEdit) && scope.onEdit(node, evt);
	                },
	                del: function del(node, nodes, evt) {
	                    findNode(node, nodes, function (index, nodes) {
	                        nodes.splice(index, 1);
	                    });
	                    angular.isFunction(scope.onDelete) && scope.onDelete(node, evt);
	                },
	                select: function select(node, nodes, evt) {
	                    if (scope.multiple) {
	                        // 处理子节点
	                        goThroughNodes(node[scope.children], function (item) {
	                            item.isSelected = !node.isSelected;
	                        });

	                        node.isSelected = !node.isSelected;
	                        var tempNode = {};
	                        var parentNode = node;
	                        while (angular.isDefined(parentNode.$parentId)) {
	                            tempNode[id] = parentNode.$parentId;
	                            parentNode = findNode(tempNode, nodes);
	                            parentNode.isSelected = scope.isChecked(parentNode);
	                        }
	                    } else {
	                        if (!node.isSelected) {
	                            goThroughNodes(nodes, function (node) {
	                                node.isSelected = false;
	                            });
	                        }
	                        node.isSelected = !node.isSelected;
	                    }

	                    angular.isFunction(scope.onSelect) && scope.onSelect(node, evt);
	                },
	                finishEdit: function finishEdit(node) {
	                    node.isEdit = false;
	                },
	                inputKeyup: function inputKeyup(node, e) {
	                    if (e.keyCode === 13) {
	                        this.finishEdit(node, e);
	                    }
	                },
	                dragStart: function dragStart(node, nodes, e) {
	                    e.originalEvent.dataTransfer.setData('id', node[id]);
	                    e.handleObj.data = node;
	                    console.log('dragStart...');
	                },
	                dragOver: function dragOver(node, nodes, e) {
	                    e.preventDefault();
	                },
	                drop: function drop(node, nodes, e) {}
	            });

	            var isDraging = false;
	            var dragNodeId = void 0;
	            var INSERT_TYPE = {
	                BEFORE: 1, // 前兄弟节点插入
	                IN: 2, // 子节点插入
	                AFTER: 3 // 后兄弟节点插入
	            };
	            // 获取插入节点的位置，三种位置: 前兄弟，后兄弟，子节点
	            var getInsertType = function getInsertType(ele, e) {
	                var rect = ele.getBoundingClientRect();
	                var eventPos = {
	                    x: e.originalEvent.pageX,
	                    y: e.originalEvent.pageY - (document.body.scrollTop || document.documentElement.scrollTop)
	                };
	                var height = rect.height;
	                var offsetY = eventPos.y - rect.top;
	                var start = height / 4;
	                var end = height / 4 * 3;
	                var insertType = INSERT_TYPE.IN;
	                // console.log(start + '-' + offsetY + '-' + end + ' | ' + eventPos.y + '-' + rect.top);

	                // 中间区域 作为孩子节点插入
	                if (offsetY >= start && offsetY <= end) {
	                    insertType = INSERT_TYPE.IN;
	                }

	                // 中间偏上 作为前兄弟节点插入
	                if (offsetY < start) {
	                    insertType = INSERT_TYPE.BEFORE;
	                }

	                // 中间偏下 作为后兄弟节点插入
	                if (offsetY > end) {
	                    insertType = INSERT_TYPE.AFTER;
	                }

	                return insertType;
	            };
	            var dragHandler = function dragHandler(e) {
	                isDraging = true;
	                var target = $(e.currentTarget);
	                var nodeId = target.data('id');
	                var node = {};
	                node[id] = nodeId;
	                node = findNode(node, scope.nodes);
	                dragNodeId = nodeId;

	                e.originalEvent.dataTransfer.effectAllowed = 'move';
	                e.originalEvent.dataTransfer.setData('dragTarget', 'treenode');
	                e.originalEvent.dataTransfer.setData('id', nodeId);
	                e.originalEvent.dataTransfer.setData('data', JSON.stringify(node));

	                scope.$apply(function () {
	                    node.isCollapsed = true;
	                    angular.isFunction(scope.onDragStart) && scope.onDragStart(node, e);
	                });
	            };
	            var dragoverHandler = function dragoverHandler(e) {
	                e.preventDefault();
	                var target = $(e.currentTarget);
	                var nodeId = target.data('id');
	                var insertType = getInsertType(target[0], e);

	                if (isDraging && dragNodeId === nodeId) {
	                    return;
	                }
	                // console.log(nodeId + '-' + dragNodeId);

	                // console.log('dragover:' + insertType);

	                switch (insertType) {
	                    case INSERT_TYPE.BEFORE:
	                        target.removeClass('insert-after insert-in').addClass('insert-before');
	                        break;
	                    case INSERT_TYPE.IN:
	                        target.removeClass('insert-after insert-before').addClass('insert-in');
	                        break;
	                    case INSERT_TYPE.AFTER:
	                        target.removeClass('insert-in insert-before').addClass('insert-after');
	                        break;
	                }
	            };
	            var dragleaveHandler = function dragleaveHandler(e) {
	                $(e.currentTarget).removeClass('insert-before insert-in insert-after');
	            };
	            var dragendHandler = function dragendHandler(e) {
	                isDraging = false;
	            };
	            var dropHandler = function dropHandler(e) {
	                var target = $(e.currentTarget);
	                var nodeId = target.data('id');
	                var node = findNode({ id: nodeId }, scope.nodes);
	                var parentNodeId = target.closest('ul').data('pid');
	                var parentNode = findNode({ id: parentNodeId }, scope.nodes);
	                var dragNodeId = e.originalEvent.dataTransfer.getData('id');
	                var insertNodeByType = function insertNodeByType(node, parentNode, addNode, insertIndex, insertType) {
	                    var insertNodes = [];

	                    if (node && addNode) {
	                        switch (insertType) {
	                            case INSERT_TYPE.BEFORE:
	                                insertNodes = parentNode ? parentNode[scope.children] : scope.nodes;
	                                break;
	                            case INSERT_TYPE.IN:
	                                node[scope.children] = node[scope.children] || [];
	                                insertNodes = node[scope.children];
	                                insertIndex = insertNodes.length;
	                                break;
	                            case INSERT_TYPE.AFTER:
	                                insertNodes = parentNode ? parentNode[scope.children] : scope.nodes;
	                                insertIndex++;
	                                break;
	                        }
	                        insertNodes.splice(insertIndex, 0, addNode);
	                    }
	                };
	                var moveNode = function moveNode(node, parentNode, dragNode, nodes, insertType) {
	                    if (node && dragNode) {
	                        var insertIndex = 0;

	                        if (parentNode) {
	                            for (var i = 0, len = parentNode[children].length; i < len; i++) {
	                                if (parentNode[children][i].id === node.id) {
	                                    insertIndex = i;
	                                    break;
	                                }
	                            }
	                        }

	                        // 当前tree 进行拖拽时，需先将该节点从当前位置删除
	                        if (isDraging) {
	                            findNode(dragNode, nodes, function (index, children) {
	                                children.splice(index, 1);
	                            });
	                        }

	                        insertNodeByType(node, parentNode, dragNode, insertIndex, insertType);
	                    }
	                };

	                var isTreeNode = e.originalEvent.dataTransfer.getData('dragTarget') === 'treenode';
	                var dragNode = isTreeNode ? JSON.parse(e.originalEvent.dataTransfer.getData('data')) : null;

	                // drop位置边界值判断，如果drop在元素竖直方向的中间区域，则将drop节点作为其子节点加入
	                // 若在中间偏上的位置则作为前兄弟节点， 若在中间位置偏下则作为后兄弟节点加入
	                var insertType = getInsertType(target[0], e);
	                var preventDrop = scope.onBeforeDrop && !scope.onBeforeDrop(e, node, parentNode, dragNode, insertType);

	                // 若拖拽的节点不是drop到自己，且onBeforeoDrop 外部回调未阻止drop则内部执行移动节点
	                if (nodeId != dragNodeId && !preventDrop) {
	                    scope.$apply(function () {
	                        moveNode(node, parentNode, dragNode, scope.nodes, insertType);
	                    });
	                }

	                angular.isFunction(scope.onDrop) && scope.onDrop(e, node, parentNode, dragNode, insertType);
	                target.removeClass('insert-before insert-in insert-after');
	                e.preventDefault();
	            };

	            if (attrs.draggable) {
	                // add drag & drop events
	                $(element).on('dragstart', '.node-info', dragHandler);
	                $(element).on('dragover', '.node-info', dragoverHandler);
	                $(element).on('dragleave', '.node-info', dragleaveHandler);
	                $(element).on('dragend', '.node-info', dragendHandler);
	                $(element).on('drop', '.node-info', dropHandler);
	            }
	        }
	    }]);

	    return TreeViewDirective;
	}();

	exports.default = TreeViewDirective;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(6);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(8)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/less-loader/index.js!./tree.less", function() {
				var newContent = require("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/less-loader/index.js!./tree.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(7)();
	// imports


	// module
	exports.push([module.id, ".tree-view {\n  padding: 10px;\n  /*border: 1px solid #ddd;*/\n}\n.tree-view > ul {\n  margin: 0;\n}\n.tree-view ul {\n  list-style: none;\n  padding: 0;\n}\n.tree-view .node-item {\n  font-size: 14px;\n  cursor: pointer;\n}\n.tree-view .node-item [role=\"node-switch\"] {\n  cursor: pointer;\n}\n.tree-view .node-switch {\n  position: relative;\n  width: 13px;\n  height: 13px;\n  border: 1px solid #ddd;\n  display: inline-block;\n  box-sizing: border-box;\n}\n.node-item.expanded .node-switch:after {\n  position: absolute;\n  content: '';\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0.5);\n  width: 16px;\n  height: 0;\n  border-top: 2px solid #ddd;\n}\n.node-item.collapsed .node-switch:after {\n  position: absolute;\n  content: '';\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0.5);\n  width: 16px;\n  height: 2px;\n  background-color: #ddd;\n}\n.node-item.collapsed .node-switch:before {\n  position: absolute;\n  content: '';\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0.5);\n  width: 2px;\n  height: 16px;\n  background-color: #ddd;\n}\n.node-item > ul {\n  overflow: hidden;\n  margin: 0;\n  padding-left: 18px;\n}\n.node-item > .node-info .node-name {\n  padding: 1px 5px;\n  border-radius: 2px;\n}\n.node-item.selected > .node-info .node-name {\n  background: #03A9F4;\n  color: #fff;\n  transition: all .25s linear;\n}\n.node-item:not(.selected) > .node-info .node-name:hover {\n  /*background: #0f88eb;*/\n  color: #03A9F4;\n}\n.node-leaf .node-switch {\n  display: none;\n}\n.node-leaf [role=\"node-switch\"] {\n  display: none;\n}\n.animation-show {\n  transition: all linear 1s;\n  opacity: 1;\n}\n.animate-show.ng-hide-add.ng-hide-add-active,\n.animate-show.ng-hide-remove.ng-hide-remove-active {\n  transition: all linear 0.5s;\n}\n.animation-show.ng-hide {\n  height: 0;\n  opacity: 0;\n  display: block !important;\n}\n.node-item .node-info {\n  position: relative;\n  line-height: 25px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.node-item .node-info .node-actions i {\n  display: none;\n}\n.node-item > .node-info:hover .node-actions i {\n  display: inline-block;\n}\n.node-item input[type=\"text\"] {\n  border-radius: 0;\n  width: auto;\n  box-sizing: border-box;\n}\n.custom-checkbox {\n  border: 1px solid #BDBDBD;\n  width: 14px;\n  height: 14px;\n  display: inline-block;\n  position: relative;\n  border-radius: 2px;\n  box-sizing: border-box;\n}\n.custom-checkbox:hover {\n  border-color: #03A9F4;\n}\n.custom-checkbox.checked:after,\n.custom-checkbox.checked-part:after {\n  position: absolute;\n  content: '';\n  left: 3px;\n  top: 0;\n  width: 4px;\n  height: 8px;\n  border-right: 2px solid #0f88eb;\n  border-bottom: 2px solid #0f88eb;\n  -webkit-transform: rotate(45deg);\n  transform: rotate(45deg);\n}\n.custom-checkbox.checked-part {\n  background: #ddd;\n}\n.node-info.insert-in {\n  background: #0f88eb;\n}\n.node-info.insert-before {\n  border-top: 1px solid #0f88eb;\n}\n.node-info.insert-after {\n  border-bottom: 1px solid #0f88eb;\n}\n.insert-arrow {\n  position: absolute;\n  content: '';\n  left: -10px;\n  top: 0;\n  border-top: 2px solid #0f88eb;\n  border-right: 2px solid #0f88eb;\n  width: 6px;\n  height: 6px;\n  -webkit-transform: rotate(45deg);\n  transform: rotate(45deg);\n  display: none;\n}\n.insert-before .insert-arrow {\n  top: 0;\n  display: block;\n}\n.insert-in .insert-arrow {\n  top: 50%;\n  transform: translateY(-50%) rotate(45deg);\n  display: block;\n}\n.insert-after .insert-arrow {\n  top: auto;\n  bottom: 0;\n  display: block;\n}\n.tree-view.menu-tree {\n  padding: 0;\n}\n.tree-view.menu-tree ul {\n  padding-left: 0;\n}\n.tree-view.menu-tree li {\n  padding-left: 0;\n}\n.tree-view.menu-tree li[level='1'] .node-info {\n  padding-left: 18px;\n}\n.tree-view.menu-tree li[level='2'] .node-info {\n  padding-left: 36px;\n}\n.tree-view.menu-tree li[level='3'] .node-info {\n  padding-left: 54px;\n}\n.tree-view.menu-tree li[level='4'] .node-info {\n  padding-left: 72px;\n}\n.tree-view.menu-tree .node-item {\n  font-size: 12px;\n  font-weight: 400;\n}\n.tree-view.menu-tree .node-item.selected > .node-info {\n  background: #B3E5FC;\n  color: #03A9F4;\n  outline: none;\n}\n.tree-view.menu-tree .node-item.selected > .node-info .node-name {\n  background: transparent;\n  color: #03A9F4;\n  outline: none;\n}\n.tree-view.menu-tree .node-name {\n  display: inline-block;\n  width: 100%;\n}\n", ""]);

	// exports


/***/ },
/* 7 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// import angular from 'angular';

	var Node = function () {
	    function Node() {
	        _classCallCheck(this, Node);

	        this.template = __webpack_require__(10);
	        this.restrict = 'AE';
	        this.replace = 'true';
	    }

	    _createClass(Node, [{
	        key: 'link',
	        value: function link(scope, element, attrs) {}
	    }]);

	    return Node;
	}();

	exports.default = angular.module('directives.treenode', []).directive('treeNode', function () {
	    return new Node();
	}).name;

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = "<li class=\"node-item\"\n    level=\"{{node.$level}}\"\n    ng-class=\"{\n        collapsed: node.isCollapsed,\n        expanded: !node.isCollapsed,\n        'node-leaf': !node[children || 'children'] || !node[children || 'children'].length,\n        selected: node.isSelected,\n        edit: node.isEdit\n    }\">\n    <div class=\"node-info\"\n        tooltip=\"{{node.$richTooltip}}\"\n        data-id=\"{{node[id]}}\"\n        draggable=\"true\"\n        ng-dragstart=\"dragStart(node, nodes, $event)\"\n        ng-dragover=\"dragOver(node, nodes, $event)\"\n        ng-drop=\"drop(node, nodes, $event)\">\n        <span class=\"insert-arrow\"></span>\n        <!--<span ng-click=\"toggle(node, $event)\" role=\"node-switch\" class=\"{{makeToggleIconClass(node)}}\"></span>-->\n        <ui-icon type=\"{{node.isCollapsed ? 'folder1' : 'folderopen'}}\" role=\"node-switch\" ng-click=\"toggle(node, $event)\"></ui-icon>\n        <span class=\"custom-checkbox\"\n            ng-click=\"select(node, nodes, $event)\"\n            ng-if=\"multiple\"\n            ng-class=\"{checked: node.isSelected, 'checked-part': !!isChecked(node, 'part')}\"></span>\n        <i class=\"{{makeIconClass(node)}}\"></i>\n        <input type=\"text\" set-focus\n            ng-if=\"node.isEdit\"\n            ng-model=\"node.name\"\n            ng-blur=\"finishEdit(node)\"\n            ng-keyup=\"inputKeyup(node, $event)\" />\n        <span ng-if=\"!node.isEdit\" ng-click=\"select(node, nodes, $event)\" class=\"node-name\" title=\"{{node[tooltip] || node[name]}}\">{{getNodeText ? getNodeText(node) : node[name]}}</span>\n        <span class=\"node-actions\" ng-if=\"editable\">\n            <i class=\"fi-page-edit\" ng-click=\"edit(node, nodes, $event)\"></i>\n            <i class=\"fi-page-delete\" ng-click=\"del(node, nodes, $event)\"></i>\n        </span>\n    </div>\n   \n    <ul class=\"node-children\" ng-class=\"{'animation-show': animation}\"\n        ng-show=\"!node.isCollapsed\"\n        ng-init=\"$parentId = node[id];$parentLevel = node.$level\"\n        data-pid=\"{{node[id]}}\">\n        <tree-node ng-repeat=\"node in node[children] track by $index\" ng-init=\"node.$parentId = $parentId;node.$level = $parentLevel + 1\"></tree-node>\n    </ul>\n</li>\n"

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = "<div class=\"tree-view\">\n    <ul>\n        <tree-node ng-repeat=\"node in nodes track by $index\" ng-init=\"node.$level = 1\"></tree-node>\n    </ul>\n</div>"

/***/ }
/******/ ]);